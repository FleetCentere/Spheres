Notes for project
Start date: Saturday October 12, 2024

Just get going - make many mini projects

### Outline notes ###
Layers
"""Focal spheres, concepts, hobbies, storylines"""
- Family
- Work
- Investing
- Academics (spheres of learning)
- Hobbies: this web app, raspberry pi, AI model, DC infrastructure, nuclear science, math, chip tape-out, space
- Odin Project
- Hugging Face
- AI models
- Building a company / entrepreneurship
- Sports
- News/entertainment
- Predictions: by anyone, in a given sphere
- The "House" sub-app
- Build a hockey-games website
- Build a mini-LLM

Purposes
- tracking activities, content, people
- scheduling to-do's, upcoming events, 
- personal finance
- House project
- Companies CRM

Objects
- Days [x]
- People
- Companies/entities
- Places
- Events (meetings, travel, appointments)
- Content: videos, articles, podcasts, music/artists, TV shows, movies, 
- Workouts

Decided Objects:
- Workouts including content during workout
- Events including meetings with people and complete/incomplete
- People
- Content (podcasts, articles, youtube videos, audiobooks, music, books, TV shows, movies, documentaries); toggle for complete or incomplete
- ContentCreators (podcasts, substacks, youtubes, etc)
- Weights
- Companies
- Posts, about one or many of content/events/companies

What do I want to be logging:
- People (events I see them at, conversations I have, content of theirs I consume like podcasts or articles)
- Personal activity and appointments (doctors, places with Henry, professional meetings, time at the office; everyday things like weight, meals, sleep location, )
- Content I consume (podcasts, articles, youtube videos, audiobooks, music, books, conversations where I take notes, TV shows, movies, documentaries; some content is re-occuring)
- Personal thoughts including reactions, predictions, 
- Tie-ins to themes/topics ("thopics"?)
- 

What is the best setup for that:
- I think I want a dayTable
- Initial tables: Days, Persons, Events, Content
- Can I create a template to make a custom type in the interface: let the user pick the attributes, through a dynamic loop that adds attributes while/for/etc


Day Object
- date
- backref: headlines/news [E], events [E], content consumed [C], people seen/spoke/interacted [P], 

TrackedByDay: its own object designed as an ASIC journal (a custom journal with 1 purpose)
- weight
- where i woke up
- wake time
- breakfast/lunch/dinner/food
- day theme (work, weekend, vacation, holiday, etc)

WorkVersion:
- Github for convert profiles
- Every bond as a stack of papers, stack of papers as running set of changes to characteristics of bond such that n+1 = n with [adjustments] in a github way


People to follow:
- DGB
- Marek
- Elliotte Friedman
- Kevin from CSS
- Matt Levine
- Ben Limberg/Meg Rowley
- Derek Thompson
- Ben Gilbert/David Rosenthal
- Ben Thompson
- John Y from Asianometry
- Dylan Patel from semianalysis

### TechStack ###
- Git: Github
- Webhosting: DigitalOcean
- iOS app: TBD
- CSS: CSS
- Javascript: React
- Backend: Python/flask
- Database: SQLAlchemy [PostgreSQL]
- Authentication: Flask-Login or JWT or OAuth 2.0
- Task Queue: Celery
- Caching: Redis
- API's: SendGrid for email, others
- CI/CD pipeline (Github Actions)
- Monitoring and logging (Prometheus, ELK stack)
- Security: HTTPS, CSRF, XSS, SQL Injection, DDoS, WAF
- CDN for static assets
- Architecture: Monolithic to start, potential to swtich to microservices
- Server-rendered pages to start, potetnail for SPA

### Coding notes ###
python -m venv venv
.\venv\Scripts\activate
pip install: flask, flask-sqlalchemy python-dotenv flask_login



### BestPractices ###
1: Flask Blueprint to modularize the code
#example structure:
/activity-tracker
├── app.py
├── /auth
│   ├── __init__.py
│   ├── routes.py
├── /tasks
│   ├── __init__.py
│   ├── models.py
│   ├── routes.py
├── /templates
├── /stati

2: Adopt MVC pattern [model-view-controller]
3: Use comments and docstrings
4: User a linter and formatter like Flask8 or Black
5: use environment vars to store sensitive data like keys or database creds (create a .env and install python-dotenv to load)
6: enable HTTPS from the start, and use flask-talisman for security headers
7: sanitize user inputs
8: hash passwords using bcrypt
9: use feature branches in version control to isolate work on new features
10: write clear commit messages that explain each commit
11: user Github Issuer or Kanban board to track tasks and bugs
12: Use databsse indexes for frequently queried fields
13: Minimize number of SQL queries per request by using relaionships
14: Use pagination to handle large data sets
15: Implement caching with Redis or Flask-Caching for frequently accessed data
16: optimize static files by compressing images and minifying CSS/JS
17: write unit tests for key components using pytest
18: set up CI piplines with Github Actions to run tests automatically
19: Use Flask-RESTful or Flask-API to design clean APIs
20: Document API using Swagger or Postman
21: Use Flask-Logginr or Sentry to track errors
22: Gracefully handle errors and show user-friendly error messages
23: Add monitoring tools like Prometheus for performance tracking

[
    Category	Best Practices
    Code Organization	Use Blueprints, follow MVC, add docstrings, use linters.
    Security	Use environment variables, HTTPS, sanitize inputs, hash passwords.
    Performance	Use indexes, pagination, caching, and static file optimization.
    Collaboration	Use Git branches, clear commits, GitHub Issues/Kanban.
    Testing & CI	Write unit tests, automate tests with GitHub Actions.
    API Design	Use Flask-RESTful, document with Swagger/Postman.
    Monitoring	Set up logging, use Sentry for error tracking.
]

### gmail ###
username: spheres.andrew@gmail.com
#: SpheresProject!23